<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.aizuda.easy.retry.template.datasource.persistence.mapper.ServerNodeMapper">
    <resultMap id="BaseResultMap" type="com.aizuda.easy.retry.template.datasource.persistence.po.ServerNode">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="group_name" jdbcType="VARCHAR" property="groupName"/>
        <result column="host_id" jdbcType="VARCHAR" property="hostId"/>
        <result column="host_ip" jdbcType="VARCHAR" property="hostIp"/>
        <result column="host_port" jdbcType="INTEGER" property="hostPort"/>
        <result column="expire_at" jdbcType="TIMESTAMP" property="expireAt"/>
        <result column="node_type" jdbcType="TINYINT" property="nodeType"/>
        <result column="context_path" jdbcType="VARCHAR" property="contextPath"/>
        <result column="ext_attrs" jdbcType="VARCHAR" property="extAttrs"/>
        <result column="create_dt" jdbcType="TIMESTAMP" property="createDt"/>
        <result column="update_dt" jdbcType="TIMESTAMP" property="updateDt"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, group_name, context_path, host_id, host_ip, host_port, expire_at, node_type,create_dt,update_dt
    </sql>

    <insert id="insertOrUpdate" parameterType="com.aizuda.easy.retry.template.datasource.persistence.po.ServerNode"
            useGeneratedKeys="false" keyProperty="id">
        MERGE INTO server_node dest
            USING(
                <foreach collection="records" item="item" index="index" separator=" UNION ALL ">
                    SELECT
                        #{item.namespaceId,jdbcType=VARCHAR} AS namespace_id,
                        #{item.groupName,jdbcType=VARCHAR} AS group_name,
                        #{item.hostId,jdbcType=VARCHAR} AS host_id,
                        #{item.hostIp,jdbcType=VARCHAR} AS host_ip,
                        #{item.hostPort,jdbcType=INTEGER} AS host_port,
                        #{item.expireAt,jdbcType=TIMESTAMP} AS expire_at,
                        #{item.nodeType,jdbcType=TINYINT} AS node_type,
                        #{item.extAttrs,jdbcType=VARCHAR} AS ext_attrs,
                        #{item.contextPath,jdbcType=VARCHAR} AS context_path,
                        #{item.createDt,jdbcType=TIMESTAMP} AS create_dt
                    FROM DUAL
                </foreach>
            ) src
            ON( dest.host_id = src.host_id AND dest.host_ip = src.host_ip)
        WHEN MATCHED THEN
            UPDATE SET expire_at = src.expire_at
        WHEN NOT MATCHED THEN
            INSERT (namespace_id, group_name, host_id, host_ip, host_port,
                    expire_at, node_type, ext_attrs, context_path, create_dt)
            VALUES
                <foreach collection="records" item="item" index="index" separator=",">
                    (#{item.namespaceId,jdbcType=VARCHAR}, #{item.groupName,jdbcType=VARCHAR}, #{item.hostId,jdbcType=VARCHAR}, #{item.hostIp,jdbcType=VARCHAR},
                     #{item.hostPort,jdbcType=INTEGER}, #{item.expireAt,jdbcType=TIMESTAMP}, #{item.nodeType,jdbcType=TINYINT},
                     #{item.extAttrs,jdbcType=VARCHAR}, #{item.contextPath,jdbcType=VARCHAR}, #{item.createDt,jdbcType=TIMESTAMP})
                </foreach>

    </insert>

    <select id="countActivePod"
            resultType="com.aizuda.easy.retry.template.datasource.persistence.dataobject.ActivePodQuantityResponseDO">
        SELECT
            node_type AS nodeType,
            COUNT(*) AS total
        FROM server_node
        ${ew.customSqlSegment}
    </select>

</mapper>
